name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")' --quiet"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do echo "Waiting..."; sleep 2; done'
        echo "MongoDB is ready!"

    - name: Run linting
      run: |
        pip install flake8
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run tests
      env:
        MONGO_URL: mongodb://localhost:27017
        DATABASE_NAME: test_user_db
      run: |
        pytest -v

    - name: Test API endpoints
      env:
        MONGO_URL: mongodb://localhost:27017
        DATABASE_NAME: test_user_db
      run: |
        python -m pytest -v --tb=short

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t user-api:latest .

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-api -p 8000:8000 \
          -e MONGO_URL=mongodb://host.docker.internal:27017 \
          -e DATABASE_NAME=test_user_db \
          user-api:latest
        sleep 10
        curl -f http://localhost:8000/ || exit 1
        docker stop test-api

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security scanning tools
      run: |
        pip install safety bandit

    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check

    - name: Run bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/

    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment step - customize based on your deployment target"
        echo "Examples:"
        echo "- Deploy to AWS ECS/EKS"
        echo "- Deploy to Azure Container Instances"
        echo "- Deploy to Google Cloud Run"
        echo "- Deploy to your own server via SSH"
        
        # Example for Docker Compose deployment:
        # docker-compose -f docker-compose.prod.yml up -d --build