name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        python -c "
        import motor.motor_asyncio
        import asyncio
        import sys
        
        async def check_mongo():
            for i in range(30):
                try:
                    client = motor.motor_asyncio.AsyncIOMotorClient('mongodb://localhost:27017', serverSelectionTimeoutMS=2000)
                    await client.admin.command('ping')
                    print('MongoDB is ready!')
                    client.close()
                    return True
                except Exception as e:
                    print(f'Waiting... (attempt {i+1}/30)')
                    await asyncio.sleep(2)
            return False
        
        async def main():
            success = await check_mongo()
            if not success:
                print('MongoDB failed to start')
                sys.exit(1)
        
        asyncio.run(main())
        "

    - name: Run linting
      run: |
        pip install flake8
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run tests
      env:
        MONGO_URL: mongodb://localhost:27017
        DATABASE_NAME: test_user_db
      run: |
        pytest -v

    - name: Test API endpoints
      env:
        MONGO_URL: mongodb://localhost:27017
        DATABASE_NAME: test_user_db
      run: |
        python -m pytest -v --tb=short

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t user-api:latest .

    - name: Test Docker image
      run: |
        # Run container in background
        docker run --rm -d --name test-api -p 8000:8000 \
          -e MONGO_URL=mongodb://host.docker.internal:27017 \
          -e DATABASE_NAME=test_user_db \
          user-api:latest
        
        # Wait for container to be ready
        echo "Waiting for container to start..."
        sleep 15
        
        # Check if container is running
        if ! docker ps | grep -q test-api; then
          echo "Container failed to start"
          docker logs test-api
          exit 1
        fi
        
        # Test health endpoint with retries
        for i in {1..5}; do
          echo "Testing health endpoint (attempt $i/5)..."
          if curl -f --connect-timeout 5 http://localhost:8000/; then
            echo "Health check passed!"
            break
          fi
          if [ $i -eq 5 ]; then
            echo "Health check failed after 5 attempts"
            docker logs test-api
            docker stop test-api
            exit 1
          fi
          sleep 5
        done
        
        # Clean up
        docker stop test-api

    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'user-api:latest'
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Run Trivy container scan (JSON)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'user-api:latest'
        format: 'json'
        output: 'trivy-image-results.json'

    - name: Upload Trivy container scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-image-results.sarif'

    - name: Upload Trivy container reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-container-reports
        path: |
          trivy-image-results.sarif
          trivy-image-results.json

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Run Trivy filesystem scan (JSON)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-fs-results.json'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-fs-results.sarif'

    - name: Upload Trivy reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-reports
        path: |
          trivy-fs-results.sarif
          trivy-fs-results.json

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment step - customize based on your deployment target"
        echo "Examples:"
        echo "- Deploy to AWS ECS/EKS"
        echo "- Deploy to Azure Container Instances"
        echo "- Deploy to Google Cloud Run"
        echo "- Deploy to your own server via SSH"
        
        # Example for Docker Compose deployment:
        # docker-compose -f docker-compose.prod.yml up -d --build